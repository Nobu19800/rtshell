=====
rtlog
=====

------------------------------------------
ポートが送るデータをログに保存して再生する
------------------------------------------

.. include:: ../../common/ja/docinfo_block.txt

書式
====

rtlog [options] <path1>:<port1> [<path2>:<port2>...]

概要
====

コンポーネントがデータポートで送るデータをログファイルに保存して再生しま
す。複数のポートでもログできます。ログされたコンポーネントを真似るために
ログファイルは別の時に時間的に再生することが加能です。

ログの複数データストリームから再生されたストリームを選択することができま
す。例えばログに複数のレーザからのデータが保存されたら一つのみのレーザ
データを再生することが加能です。再生はログの始まりだけではなくて途中から
途中までを再生して、再生レートを変わったり出力されたデータのタイムスタン
プを編集することも加能です。

ディフォルトでログを保存します。コマンドに渡したすべてのポートはアウトポ
ートにすることは必要です。再生モードの場合、すべてのポートはインポートに
してログのデータ型に合うことは必要です。

記録されたポートは一つずつログにデータストリームになります。再生の時、こ
のデータストリームは複数のインポートに送ることができます。データストリー
ムは名で区別されます。名はコマンドラインに設定することまたはでぃフォルト
名を自動的に作ることがあります。

ログツールから目的のポートまでの接続はディフォルトのプロパティで作られま
す。

オプション
==========

-a, --absolute-times
  ログからのタイムスタンプは記録されたままでおくる。指定しない場合、タイ
  ムスタンプは現在の時刻でオフセットされる。

-d, --display-info
  ログの情報を表示して終了する。

-e END, --end=END
  記録や再生を止まるタイムスタンプまたはインデクスを指定する。ログの最初
  と最後のデータの間にすることは必要だ。``-1``を指定すると永遠に記録する
  またはログの最後まで再生する。インデクスの場合、``--index``も指定して
  ください。

-f FILENAME, --filename=FILENAME
  ログファイルの名。指定しない場合、現在の時刻で自動的に作る。再生の時は
  必要だ。

--path=PATHS
  モジュールのサーチパス。Pythonの``PYTHONPATH``変数に追加する。

-i, --index
  ``--start``と``--end``の値をタイムスタンプではなくてインデクスとして
  使う。

-l LOGGER, --logger=LOGGER
  ログ種類を選択する。ディフォルトはSimplePickle（``simpkl``）だ。テクス
  トログ（``text``）を使うこともできる。テクストログは再生不可能だ。

-m MODULES, --mod=MODULES
  Import する必要な Python モジュール。値の必要なモジュールは自動的に
  ロードされていない場合、このオプションで指定してください。モジュール
  とそのモジュールの``__POA``のモジュールも import します。

-n, --ignore-times
  （再生のみ）ログに記録されたタイムスタンプを無視して定期的にログデー
  タを再生する。定期を変わることは``--exec-rate``を使ってください。

-p, --play
  再生モード。

-r RATE, --rate=RATE
  （再生のみ）再生レートをスケールする。[ディフォルト: 1.0x]

-s START, --start=START
  （再生のみ）再生を始まるタイムスタンプまたはインデクスを指定する。ログ
  の最初と最後のデータの間にすることは必要だ。インデクスの場合、
  ``--index``も指定してください。

-t TIMEOUT, --timeout=TIMEOUT
  記録または再生の時間制限。このオプションを使う場合、``--start``と
  ``--end``を使うことは不可能だ。

-x EXEC_RATE, --exec-rate=EXEC_RATE
  コンポーネントの実行レート。単位はハーツだ。[ディフォルト: 100Hz]

.. include:: ../../common/ja/common_opts.txt

.. include:: ../../common/ja/common_body.txt

例
==

::

  $ rtlog -f log.rtlog /localhost/ConsoleIn0.rtc:out.numbers

``ConsoleIn0.rtc``コンポーネントは``out``ポートで送るデータをログします。
データストリームは``numbers``という名で個別されます。ログファイルの名は
``log.rtlog``です。

::

  $ rtlog -f log.rtlog -p /localhost/ConsoleOut0.rtc:in.numbers

ログファイルから``numbers``というデータストリームを``ConsoleOut0.rtc``の
``in``ポートに再生します。

::

  $ rtlog -f log.rtlog -d

ログの情報を表示します。ログのスターとタイム、エンドタイム、データスト
リーム等が含めています。

::

  $ rtlog -f log.rtlog -e 1292489690
    /localhost/ConsoleIn0.rtc:out.numbers

コンピュータの時計は「1292489690」になるまでログしてそして終了します。

::

  $ rtlog -f log.rtlog -e 10 -i /localhost/ConsoleIn0.rtc:out.numbers

データの10個をログして終了します。

::

  $ rtlog -f log.rtlog -t 10 /localhost/ConsoleIn0.rtc:out.numbers

10秒間ログして終了します。

::

  $ rtlog -f log.rtlog -p -s 1292489690
    /localhost/ConsoleOut0.rtc:in.numbers

「1292489690」のタイムスタンプから再生を始めます。

::

  $ rtlog -f log.rtlog -p -e 1292489700
    /localhost/ConsoleOut0.rtc:in.numbers

最初のデータから「1292489700」のタイムスタンプまで再生します。

::

  $ rtlog -f log.rtlog -p -s 1292489690 -e 1292489700
    /localhost/ConsoleOut0.rtc:in.numbers

「1292489690」のタイムスタンプから「1292489700」のタイムスタンプまで再
生します.（大体10秒のデータだ。）

::

  $ rtlog -f log.rtlog -p -s 5 -i
    /localhost/ConsoleOut0.rtc:in.numbers

５個目のデータから再生を始めます。

::

  $ rtlog -f log.rtlog -p -e 10 /localhost/ConsoleOut0.rtc:in.numbers

最初のデータから10個目のデータまで再生します。

::

  $ rtlog -f log.rtlog -p -s 5 -e 10
    /localhost/ConsoleOut0.rtc:in.numbers

5個目のデータから10個目のデータまで再生します。（5個のデータだ。）

::

  $ rtlog -f log.rtlog -p -t 10 /localhost/ConsoleOut0.rtc:in.numbers

最初の10秒間のデータを再生します。

::

  $ rtlog -f log.rtlog -p -r 5 /localhost/ConsoleOut0.rtc:in.numbers

ログの記録の早さを5倍で再生します。

::

  $ rtlog -f log.rtlog -p -r 0.2 /localhost/ConsoleOut0.rtc:in.numbers

ログの記録の早さを0.2倍で再生します。

::

  $ rtlog -f log.rtlog -p -n 5 -x 1 /localhost/ConsoleOut0.rtc:in.numbers

1秒1回実行して、1実行に5個のデータを再生します。

::

  $ rtlog -f log.rtlog /localhost/Sensor0.rtc:out.sensor
    /localhost/Controller0.rtc:out.ctrl /localhost/Motor0.rtc:out.motor

一つのファイルに三つのデータストリームを記録します。ストリームの名は
``sensor``と``ctrl``と``motor``です。

::

  $ rtlog -f log.rtlog /localhost/Sensor0.rtc:in.motor
    /localhost/Motor0.rtc:in.ctrl

一つのログから二つのデータストリームを別々のポートに再生します。

::

  $ rtlog -f log.rtlog -p /localhost/Controller0.rtc:in.sensor
    /localhost/Controller0.rtc:in.motor

一つのログから二つのデータストリームを同じポートに再生します。

::

  $ rtlog -f log.rtlog -p /localhost/Sensor0.rtc:in.motor
    /localhost/Controller0.rtc:in.motor

ログから一つのデータストリームを複数のポートに再生します。

``--mod``と``--path``の例はrtinject(1)に参照してください。

参照
====

  ``rtcat`` (1),
  ``rtinject`` (1),
  ``rtprint`` (1)

